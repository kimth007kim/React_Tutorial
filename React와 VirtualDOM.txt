React and Virtual DOM

View가 모델을 받아서 스케치를 하고 React에다가 전달한다.
React 는 정확하고 빠른 메모리 저장소이다.


리액트는 왜쓸까?

가상돔에대한 이해

1)브라우저가 HTML을 그리는과정
브라우저는 html을 읽어서 DOM트리, CSS트리를 만들고 DOM이 화면에 있어야할 위치를 잡고 거기에 색을 채운다.
이러한과정이 많던 복잡하던 문제가 되지않는다 하지만 html이 자바스크립트를 이용해서 DOM을 수시로 변경해달라고하면
브라우저는 또 착한녀석이라 일을 요청이 오는대로 해결한다.

노드가 1000개쯤있는 DOM트리를 뒤져서 특정 노드를 찾아서 width넓히고 다시CSS트리를 만들고 합치고 화면에 스케치하고 색을채운다.
DOM수정요청이 100번오면 브라우저는 위의 같은일을 100번한다.

즉 브라우저는 실시간 DOM수정요청으로 그림을 다시그리는데 , 효율적이지 못하다.

가상돔이 브라우저의 단점을 도와준다.
100번의 DOM 수정요청이 오면, 가상 돔은 브라우저 대신 DOM변경을 인지하고 그내용을 가상돔에 반영한다. (아직 화면에 안그림)
(가상돔은 정확하게 어떤것들이 그려졌었고 수정되었는지 안다.)
이변화를 반영한 가상돔의 내용을 브라우저에게 전달하여 그리게한다.(100번 그리던것을 1번만 그린다.)


React라는 것은 무엇인가?

React는 사용자 인터페이스를 구축하기 위한 선언적이고 효율적이며 유연한 JavaScript 라이브러리입니다. "컴포넌트"라고 불리는 작고 고립된
코드의 파편을 이용해서 복잡한 UI 구성을 돕는다.

React는 몇가지 컴포넌트를 가지지만 우리는 React.Component의 하위 클래스를 사용했다.
class ShoppingList extends React.Component {
  render() {
    return (
      <div className="shopping-list">
        <h1>Shopping List for {this.props.name}</h1>
        <ul>
          <li>Instagram</li>
          <li>WhatsApp</li>
          <li>Oculus</li>
        </ul>
      </div>
    );
  }
}

XML과 유사한 재밌는 태그를 사용할것이다. React에게 화면에 표현하고 싶은것이 무엇인지 알려준다. 데이터가 변경될떄 React는 컴포넌트를 효율적으로 업데이트하고 다시 렌더링한다.

여기에서 ShoppingList는 React 컴포넌트 클래스 또는 React 컴포넌트 타입이다.
개별컴포넌트는 props라는 매개변수를 받아오고 render 함수를 통해 표시할 뷰 계층 구조를 반환한다.


render 함수는 화면에서 보고자 하는 내용을 반환한다.
React는 설명을 전달받고 결과를 표시합니다. 특히 render는 렌더링 할 내용을 경량화한 React 엘리먼트를 반환합니다. 
다수의 React 개발자는 "JSX"라는 특수한 문법을 사용하여 React의 구조를 보다 쉽게 작성한다. 
<div /> 구문은 빌드를 하는 시점에서 React.createElement('div') 로 변환된다.

JSX는 Javascript의 가엵한 기능을 가지고있다. JSX 내부의 중괄호에는 어떤 JavaScript 표현식도 사용할수 있다.
React 엘리먼트는  Javascript 객체이며 변수에 저장하거나 프로그램 여기저기에 전달 가능하다.

ShoppingList 컴포넌트는 <div/>와 </li> 같은 내각 DOM 컴포넌트만을 렌더링하지만 컴포넌트를 조합하여 커스텀 React 컴포넌트를 렌더링 하는것도 가능하다.
EX)
<shoppingList/> 를 작성하여 모든 쇼핑목록을 참조할수도 있다. React 컴포넌트는 캡슐화되어 독립적으로 동작할수도있다.
이러한 이유로 단순한 컴포넌트를 사용하여 복잡한 UI를 구현할수있다.

props의 정의

-React에서 props는 Immutable Data 즉, 변하지 않는 데이터이다. 상위 (부모) 컴포넌트에서 하위(자식) 컴포넌트로 데이터를 넘겨줄때 사용한다.
- state는 컴포넌트의 상태를 저장할수있다. props와 차이점이라면 컴포넌트 내부에 존재하고 있기 때문에 상태값 변경이가능하다.

React 컴포넌트는 생성자에 this.state를 설정하는 것으로 state를 가질수 있다.
this.state는 정의된 React 컴포넌트에 대해 비공개로 간주해야한다.


class Square extends React.Component {
  constructor(props) {					//React 컴포넌트는 생성자에 this.state를 설정하는것으로 state를 가질수 있다.
    super(props);						//JavaScript 클래스에서 하위 클래스의 생성자를 정의할때 항상 super를 호출해야한다.
    this.state = {
      value: null,						//State를 초기화함
    };
  }

  render() {
    return (
      <button className="square" 
      onClick={() => this.setState({ value: "X" })}>		// onClick 핸들러를 통해 this.setState를 호출하는 것으로 React에게 <button>을 클릭할 때 Square가 다시 렌더링해야한다고 알릴수있다.
        {this.state.value}				// 업데이트 이후에 Square의 this.state.value는 'X' 가되어서 게임판에서 X가나타나는것을 확인할 수있다.
      </button>					// 컴포넌트에서 setState를 호출하면 React는 자동으로 컴포넌트내부의 자식컴포넌트 역시 업데이트 한다.
    );		
  }



Board가 각 Square에 Square의 state를 요청해야 한다고 생각할 수있다. 그리고 이런 접근이 가능하기는 하지만 이방식은 코드를 어렵게 만들고
버그에 취약하며 리팩토링이 어렵기 떄문에 추천하지 않는다.
각 Square가 아닌 Board 컴포넌트에 게임의 상태를 저장하는것이 가장좋은 방법이다,

여러개의 자식으로 부터 데이터를 모으거나 두개의 자식 컴포넌트들이 서로 통신하게 하려면 부모 컴포넌트에 공유 state를 정의 해야한다.
부모 컴포넌트는  props를 사용하여 자식 컴포넌트에 state를 다시 전달할수 있다. 이것은 자식 컴포넌트들이 서로 또는 부모 컴포넌트와 동기화 하도록 만든다.

state를 부모 컴포넌트로 끌어올리는 것은 React 컴포넌트를 리팩토링 할때 흔히 사용한다.


